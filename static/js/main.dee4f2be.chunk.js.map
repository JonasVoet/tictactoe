{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","status","useState","Array","fill","squares","setSquares","renderSquare","i","handleClick","xIsNext","setxIsNext","sq","slice","calculateWinner","lines","length","a","b","c","winner","Game","App","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAYeA,EAVA,SAACC,GAEZ,OAEI,4BAAQC,UAAU,SAASC,QAAS,kBAAMF,EAAME,QAAQ,OACnDF,EAAMG,QC6EJC,EAjFD,SAACJ,GAAW,IAgDlBK,EAhDiB,EAESC,mBAE1BC,MAAM,GAAGC,KAAK,OAJG,mBAEdC,EAFc,KAELC,EAFK,KAOfC,EAAe,SAACC,GAClB,OAAO,kBAAC,EAAD,CAAQT,MAAOM,EAAQG,GAAIV,QAAS,kBAAMW,EAAYD,OAR5C,EAaSN,oBAAS,GAblB,mBAadQ,EAbc,KAaLC,EAbK,KAefF,EAAc,SAACD,GACjB,IAAMI,EAAKP,EAAQQ,QACfC,EAAgBT,IAAYA,EAAQG,KAGxCI,EAAGJ,GAAKE,EAAU,IAAM,IACxBJ,EAAWM,GACXD,GAAYD,KAIVI,EAAkB,SAACT,GAYrB,IAXA,IAAMU,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFP,EAAI,EAAGA,EAAIO,EAAMC,OAAQR,IAAK,CAAC,IAAD,cACjBO,EAAMP,GADW,GAC5BS,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAId,EAAQY,IAAMZ,EAAQY,KAAOZ,EAAQa,IAAMb,EAAQY,KAAOZ,EAAQc,GAClE,OAAOd,EAAQY,GAGvB,OAAO,MAGLG,EAASN,EAAgBT,GAW/B,OAPIJ,EADAmB,EACS,WAAaA,EAAS,qBAGtB,iBAAmBV,EAAU,IAAM,KAK5C,6BACI,yBAAKb,UAAU,UAAUI,GACzB,yBAAKJ,UAAU,aACVU,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKV,UAAU,aACVU,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKV,UAAU,aACVU,EAAa,GACbA,EAAa,GACbA,EAAa,MC1Dfc,EAhBF,WACT,OACI,yBAAKxB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,aACX,8BACA,gCCUDyB,MAlBf,WACE,OACE,yBAAKzB,UAAU,OACb,wBAAIA,UAAU,yBAAd,eACA,uBAAGA,UAAU,mBAAb,gBACA,yBAAKA,UAAU,iCACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,8BACE,4BAAQ0B,KAAK,SAAS1B,UAAU,2BAAhC,gBCFU2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dee4f2be.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = (props) => {\r\n\r\n    return (\r\n        // click function til hver firkant, så der kommer et x eller o\r\n        <button className=\"square\" onClick={() => props.onClick('X')}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square;\r\n","import React, { useState } from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = (props) => {\r\n\r\n    const [squares, setSquares] = useState(\r\n        // array af alle boksene\r\n        Array(9).fill(null)\r\n    );\r\n\r\n    const renderSquare = (i) => {\r\n        return <Square value={squares[i]} onClick={() => handleClick(i)} />;\r\n\r\n    }\r\n\r\n\r\n    const [xIsNext, setxIsNext] = useState(true);\r\n\r\n    const handleClick = (i) => {\r\n        const sq = squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        sq[i] = xIsNext ? 'X' : 'O';\r\n        setSquares(sq);\r\n        setxIsNext(!xIsNext);\r\n    }\r\n\r\n\r\n    const calculateWinner = (squares) => {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const winner = calculateWinner(squares);\r\n    let status;\r\n\r\n    if (winner) {\r\n        status = 'Winner: ' + winner + ' You are the best!';\r\n        // Hvis man ikke vinder, så er det næste players tur\r\n    } else {\r\n        status = 'Next Player: ' + (xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"status\">{status}</div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport Board from './Board';\r\n\r\nconst Game = () => {\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board />\r\n            </div>\r\n\r\n            <div className=\"game-info\">\r\n                <div>{/* status */}</div>\r\n                <ol>{/* TODO */}</ol>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport Game from './components/Game';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"display-1 text-center\">Tic Tac Toe</h1>\n      <p className=\"text-center m-3\">A React Game</p>\n      <div className=\"d-flex justify-content-center\">\n        <Game />\n      </div>\n      <div className=\"col text-center\">\n        <form>\n          <button type=\"submit\" className=\"btn btn-light mt-3 mr-5\">New game</button>\n        </form>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}